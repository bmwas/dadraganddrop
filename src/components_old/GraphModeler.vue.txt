<template>
    <div class="flex justify-center bg-gray-200 py-4">
        
        <div class="w-20 bg-white border-r border-gray-300">
            <div v-if="dnd == null" class="bg-gray-300 cursor-wait select-none w-full h-full p-2">
                <span>Loading...</span>
            </div>
            <div v-else>
                <!--
                <div class="shape" data-type="start" @mousedown="startDrag($event)">
                    Start
                </div>
                <div class="shape" data-type="decision" @mousedown="startDrag($event)">
                    Decision
                </div>
                <div class="shape" data-type="notice" @mousedown="startDrag($event)">
                    Notice
                </div>
                <div class="shape" data-type="end" @mousedown="startDrag($event)">
                    End
                </div>
                -->

                <div v-for="(element, element_name) of elements" 
                    :key="element_name" 
                    class="shape cursor-move p-2 bg-blue-200 border-b border-gray-400 my-1" 
                    :data-type="element_name"
                    @mousedown="startDrag($event)">
                    {{ element_name }}

                    <!-- <svg width="" height="">
                    </svg> -->
                </div>
            </div>
        </div>

        <div  class="relative h-full" id="modeler-container"></div>
    </div>
</template>

<script lang="ts" setup>
import { onMounted, reactive, Ref, ref } from 'vue'

import { Addon, Graph, Node } from "@antv/x6";
import { Dnd } from '@antv/x6/lib/addon/dnd';
// import GraphElementsBar from './GraphElementsBar.vue';

import { elements, graph_options } from './concept_1';


const dnd: Ref<Dnd | null> = ref(null);
const graph: Ref<Graph | null> = ref(null);

function initModeler(container: HTMLElement) {
    // graph-quiz: https://github.com/eensander/graph-quiz/blob/master/resources/js/components/dashboard/graph/GraphModeler.vue
    // stencil example: https://codesandbox.io/s/m9fzwi

    let width = container.scrollWidth;
    let height = container.scrollHeight || 500;

    graph.value = new Graph({
        container,
        width,
        height,
        ...graph_options
    });
}

function initExampleNodes() {
    const path = graph.value?.addNode({
        shape: 'polygon',
        x: graph.value.options.width/2,
        y: graph.value.options.height/2,
        width: 80,
        height: 80,
        points: '26.934,1.318 35.256,18.182 53.867,20.887 40.4,34.013 43.579,52.549 26.934,43.798 10.288,52.549 13.467,34.013 0,20.887 18.611,18.182',
        attrs: {
            body: {
                stroke: 'black',
            },
        },
    })

    console.log("test", graph.value, path)
}

function initDnd(graph_arg: Graph) {
    graph.value = graph_arg;

    dnd.value = new Addon.Dnd({
        target: graph.value,
        scaled: false,
    })
}

function startDrag(e: Event) {
    if (graph.value == null)
        return;
        
    const target = e.target as HTMLDivElement
    const type = target.getAttribute('data-type')!

    console.log(e, type, Object.keys(elements));
    
    if (!(Object.keys(elements).includes(type))) {
        throw Error("Element does not exist")
    }

    const node = graph.value.createNode(elements[type].antv_metadata);
    node.label = type
    
    console.log(node);
    dnd.value?.start(node, e);
}


onMounted(() => {
    
    const container = document.getElementById("modeler-container");
    if (container != null)
    {
        initModeler(container)
        if (graph.value != null)
        {
            initDnd(graph.value)
            // initExampleNodes()
        }
    }
    else
    {
        console.error("Container is null")
    }

})

</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped lang="scss">

#modeler-container {
    width: 800px;
    height: 600px;
    // background-color: red;
}
</style>
